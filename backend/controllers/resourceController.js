const Resource = require("../models/Resource");

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
exports.createResource = async (req, res) => {
    const { title } = req.body;
    const resource = new Resource({ title, userId: req.user.id });
    await resource.save();
    res.json({ message: "‚úÖ –†–µ—Å—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω" });
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getResources = async (req, res) => {
    const resources = await Resource.find({ userId: req.user.id });
    res.json(resources);
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID
exports.getResourceById = async (req, res) => {
    try {
        const resource = await Resource.findOne({ _id: req.params.id, userId: req.user.id });
        if (!resource) return res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        res.json(resource);
    } catch (err) {
        res.status(400).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞" });
    }
};

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
exports.updateResource = async (req, res) => {
    try {
        const { title, completed } = req.body;
        const resource = await Resource.findOneAndUpdate(
            { _id: req.params.id, userId: req.user.id },
            { title, completed },
            { new: true }
        );

        if (!resource) return res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        res.json({ message: "‚úÖ –†–µ—Å—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω", resource });
    } catch (err) {
        res.status(400).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞" });
    }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.deleteResource = async (req, res) => {
    try {
        const resource = await Resource.findOneAndDelete({ _id: req.params.id });
        if (!resource) return res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

        res.json({ message: "‚úÖ –†–µ—Å—É—Ä—Å —É–¥–∞–ª–µ–Ω" });
    } catch (err) {
        res.status(400).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞" });
    }
};
